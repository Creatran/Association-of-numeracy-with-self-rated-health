hhinc == 8 ~ 4,
hhinc == 9 ~ 5
)) %>%
mutate(income.cat = factor(income.cat, levels = c(1:5,-1), labels = c("<$10k", "$10k-$50k", "$50k-$100k", "$100k-$150k", "$150k+", "No Data")))
## race
race <- raw_ESP[which(regexpr("race", colnames(raw_ESP))==1)]
colnames(race) <- c("white", "black", "natam", "asian", "other")
race <- race %>%
mutate(count = white+black+natam+asian+other,
race = case_when(
count >= 2 ~ "More than 1 race",
count <= 0 ~ "Refused",
white == 1 ~ "White",
black == 1 ~ "Black",
natam == 1 ~ "Natam",
asian == 1 ~ "Asian",
other == 1 ~ "Other"),
race = factor(race, levels = c("White", "Black", "Asian", "Natam", "More than 1 race", "Other", "Refused")))
### append the combined race variable to ESP dataset
ESP$race <- race$race
## ethnicity
ESP <- ESP %>%
mutate(hisp = fct_recode(factor(hisp), "Non-hispanic"="0", "Hispanic"="1", "Refused"="-1")) %>%
mutate(hisp = factor(hisp, levels = c("Hispanic", "Non-hispanic", "Refused")))
ESP
# add the numeracy variable into ESP dataset; numeracy = JAq1+JAq2+JAq3
ESP <- ESP %>%
mutate(numeracy = ifelse(JAq1>0,JAq1,0) + ifelse(JAq2>0,JAq2,0) + ifelse(JAq3>0,JAq3,0))
# collapse health status (JAq4) into two levels
ESP <- ESP %>%
mutate(health_status_1 = ifelse(JAq4<=4, "Not Poor", "Poor"), # "Not Poor" = ("Excellent","Very Good","Good","Fair"), "Poor" = ("Poor")
health_status_2 = ifelse(JAq3<=3, "Good", "Not Good")) %>% # "Good" = ("Excellent","Very Good","Good"), "Not Good" = ("Fair","Poor")
mutate(health_status_1 = relevel(factor(health_status_1), "Poor"), # set the reference level of health_status_1 as Poor
health_status_2 = relevel(factor(health_status_2), "Not Good"), # set the reference level of health_status_2 as Not Good
health_status = factor(JAq4, levels = c(1:5), labels = c("Excellent", "Very Good","Good","Fair", "Poor")))
# reorder columns and save as RData file
ESP <- ESP %>%
select(gender, age, age.cat, educ, income.cat, race, hisp, JAq1, JAq2, JAq3, numeracy, JAq4, health_status, health_status_1, health_status_2)
ESP
NYS_age_gender <- read_xlsx("../Data/nys_age_gender.xlsx", range = "A29:G32", col_names = F)
cat.smry <- function(mat, labels = NULL) {
perc <- paste0(round(prop.table(mat)*100,2),"%")
n.perc <- paste0(mat,"(",perc,")")
if(is.null(labels))
names(n.perc) <- names(mat)
else
names(n.perc) <- labels
return(n.perc)
}
NYS.gender <- cat.smry(c(sum(NYS_age_gender[,4]), sum(NYS_age_gender[,6])), labels = c("Male", "Female"))
NYS.age <- cat.smry(unlist(NYS_age_gender[,2]), labels = levels(ESP$age.cat)[1:4])
NYS_educ <- read_xlsx("./data/nys_educ.xlsx", range = "C6:Q8")[2,] %>% unlist()
NYS_educ <- read_xlsx("../Data/nys_educ.xlsx", range = "C6:Q8")[2,] %>% unlist()
NYS.educ <- sapply(list(1:8, 9:11, 12:15), function(x) sum(NYS_educ[x])) %>% cat.smry(labels = levels(ESP$educ)[1:3])
# here actually the first two levels of income for NYS is under 15k and 15k-50k
NYS_income <- read_xls("../Data/nys_income.xls", range = "D7:L7", col_names = F) %>% unlist()
NYS.income <- sapply(list(1, 2:4, 3:6, 7, 8:9), function(x) round(sum(NYS_income[x])/100*128579)) %>% cat.smry(labels = c("<$10k", "$10k-$50k", "$50k-$100k", "$100k-$150k", "$150k+"))
NYS.gender
NYS_age_gender
NYS_age_gender[,4]
# collapse asian alone and native hawaiian and other pacific islander alone together as asian https://www.census.gov/quickfacts/NY
NYS.race <- cat.smry(round(c(0.697,0.176,0.091,0.01,0.026)*19453561/1000), labels = c("White", "Black", "Asian", "Natam", "More than 1 race"))
NYS.hisp <- cat.smry(c(41217,250263-41217), labels = c("Hispanic", "Non-hispanic"))
# gather all the cat.smry result for NYS population
NYS.smry <- c(NYS.gender, NYS.age, NYS.educ, NYS.income, NYS.race, NYS.hisp)
# extract counts from NYS.smry
NYS.n <- c()
for(i in 1:length(NYS.smry)) {
n.perc <- NYS.smry[i]
n <- substr(n.perc, 1, unlist(gregexpr("\\(",n.perc))-1)
NYS.n <- c(NYS.n, n)
}
NYS.n <- as.numeric(NYS.n)
# save NYS population demographical summary as an RData file
NYS <- data.frame(counts = NYS.n, n_perc = NYS.smry)
NYS
raw_PIAAC <- read_spss("./data/prgusap1_puf.sav")
raw_PIAAC <- read_spss("../Data/prgusap1_puf.sav")
PIAAC <- raw_PIAAC %>%
select(I_Q08, PVNUM1, B_Q01A, J_Q09USX, RACETHN_5CAT, PVLIT1, PVPSL1) %>%
rename(health_score = I_Q08, # outcome
numeracy = PVNUM1, literacy = PVLIT1, problem_solving = PVPSL1, # predictor and additional predictors
educ = B_Q01A, income.cat = J_Q09USX, race = RACETHN_5CAT) # covariates
## education
### table(PIAAC$educ, useNA = "ifany")
PIAAC <- PIAAC %>%
mutate(educ = case_when(
educ <= 7 ~ "High school or less",
educ <= 11 ~ "Some college or associate's degree",
educ <= 15 ~ "Bachelor's degree or higher",
is.na(educ) ~ "Unknown"
)) %>%
mutate(educ = factor(educ, levels = c("High school or less", "Some college or associate's degree", "Bachelor's degree or higher", "Unknown")))
## income
### table(PIAAC$income.cat, useNA = "ifany")
PIAAC <- PIAAC %>%
mutate(income.cat = case_when(
is.na(income.cat) ~ -1,
income.cat %in% c(1,11) ~ 1,
income.cat < 6 ~ 2,
income.cat < 9 ~ 3,
income.cat == 9 ~ 4,
income.cat == 10 ~ 5
)) %>%
mutate(income.cat = factor(income.cat, levels = c(1:5,-1), labels = c("<$10k", "$10k-$50k", "$50k-$100k", "$100k-$150k", "$150k+", "No Data")))
## race/ethnicity
### table(PIAAC$race_ethnicity, useNA = "ifany")
PIAAC <- PIAAC %>%
mutate(race = case_when(
is.na(race) ~ "Unknown",
race == 1 ~ "Hispanic",
race == 2 ~ "White",
race == 3 ~ "Black",
race == 4 ~ "Asian/pacific islander",
race == 6 ~ "Other"
)) %>%
mutate(race = factor(race, levels = c("White", "Black", "Asian/pacific islander", "Hispanic", "Other", "Unknown")))
## collapse health status into two levels
### table(PIAAC$health_score, useNA = "ifany")
PIAAC <- PIAAC %>%
mutate(health_status = case_when(
is.na(health_score) ~ "Unknown",
health_score == 1 ~ "Excellent",
health_score == 2 ~ "Very Good",
health_score == 3 ~ "Good",
health_score == 4 ~ "Fair",
health_score == 5 ~ "Poor"
)) %>%
mutate(health_status = factor(health_status, levels = c("Excellent", "Very Good","Good","Fair", "Poor", "Unknown")),
health_status_1 = fct_collapse(health_status, `Not Poor` = c("Excellent","Very Good","Good","Fair"), Poor = c("Poor"), Unknown = c("Unknown")),
health_status_2 = fct_collapse(health_status, Good = c("Excellent","Very Good","Good"), `Not Good` = c("Fair","Poor"), Unknown = c("Unknown"))) %>%
mutate(health_status_1 = factor(health_status_1, levels = c("Not Poor", "Poor", "Unknown")),
health_status_2 = factor(health_status_2, levels = c("Good", "Not Good", "Unknown")))
PIAAC
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 3, digits = 3)
load("../Data/ESP.RData")
load("../Data/NYS.RData")
load("../Data/PIAAC.RData")
# calculate the number of refuse or -1 (in JAqs) in each column
refuse <- sapply(ESP, function(x) sum(x%in%c("Refused",-1)))
# keep the columns that have refuse
refuse <- refuse[which(refuse>0)]
# append the refuse rate and create a data frame; -2 means remove `age` since it overlaps with age.cat
refuse.df <- rbind(refuse, refuse/8) %>% as.data.frame()
refuse.df
ESP
# calculate the number of refuse or -1 (in JAqs) in each column
refuse <- sapply(ESP, function(x) sum(x%in%c("Refused",-1)))
refuse
# keep the columns that have refuse
refuse <- refuse[which(refuse>0)]
refuse
# append the refuse rate and create a data frame; -2 means remove `age` since it overlaps with age.cat
refuse.df <- rbind(refuse, refuse/8) %>% as.data.frame()
refuse.df
refuse.df <- refuse.df[,-2]
# set col- and rownames
colnames(refuse.df) <- c("Gender", "Age Level", "Education", "Race", "Ethnicity", "JAq1: Fractions", "JAq2: Percentages", "JAq3: Numerical Info")
rownames(refuse.df) <- c("Number", "%")
refuse.df
par(mfrow = c(1,2))
plot(x=ESP$numeracy, y=ESP$JAq4, pch=19, xlab = "Numeracy Score", ylab = "Health Status Score", main = "Scatter plot of numeracy score and health status")
boxplot(numeracy~JAq4, data = ESP, xlab = "Health Status Score", ylab = "Numeracy Score", main = "Box plot of numeracy score and health status")
# perform one-way ANOVA test
summary(aov(numeracy~health_status, data = ESP))
ESP %>%
filter(educ != "Refused") %>%
group_by(educ) %>%
ggplot() +
geom_boxplot(aes(x=educ, y=numeracy)) +
labs(x = NULL, title = "Box plot of numeracy score and education") +
theme_bw()
ESP %>%
filter(educ != "Refused") %>%
group_by(educ) %>%
ggplot() +
geom_boxplot(aes(x=educ, y=numeracy)) +
labs(x = NULL, title = "Box plot of numeracy score and education") +
theme_bw()
# performe one-way ANOVA test
summary(aov(numeracy~educ, data = ESP))
cat.smry <- function(mat, labels = NULL) {
perc <- paste0(round(prop.table(mat)*100,2),"%")
n.perc <- paste0(mat,"(",perc,")")
if(is.null(labels))
names(n.perc) <- names(mat)
else
names(n.perc) <- labels
return(n.perc)
}
# gather all the cat.smry result for ESP sample
ESP.smry <- c(cat.smry(table(ESP$gender)),
cat.smry(table(ESP$age.cat)),
cat.smry(table(ESP$educ)),
cat.smry(table(ESP$income.cat)),
cat.smry(table(ESP$race)),
cat.smry(table(ESP$hisp)))
# join NYS.smry and ESP.smry together (drop levels such as "No data" and "Refused" which are unique for ESP sample by left join NYS)
comp1 <- data.frame(Demographics = rownames(NYS), NYS = NYS$n_perc) %>%
left_join(data.frame(d = names(ESP.smry), ESP = ESP.smry), by = c("Demographics" = "d"))
# extract counts from ESP.smry
ESP.smry <- comp1$ESP
ESP.n <- c()
for(i in 1:length(ESP.smry)) {
n.perc <- ESP.smry[i]
n <- substr(n.perc, 1, unlist(gregexpr("\\(",n.perc))-1)
ESP.n <- c(ESP.n, n)
}
ESP.n <- as.numeric(ESP.n)
# bind the counts of ESP and NYS preparing for fisher's test
fisher.mat <- rbind(ESP.n, unlist(NYS$counts)) %>% as.matrix()
# add subtitles of demographics
comp1 <- rbind(c("Gender", "", ""), comp1[1:2,],
c("Age", "", ""), comp1[3:6,],
c("Education", "", ""), comp1[7:9,],
c("Income", "", ""), comp1[10:14,],
c("Race", "", ""), comp1[15:19,],
c("Ethnicity", "", ""), comp1[20:21,]) %>% as.data.frame()
# append p-values of fisher's test
comp1$pval <- sapply(list(1:2,3:6,7:9,10:14,15:19,20:21),
function(x){
mat <- fisher.mat[,x]
pval <- fisher.test(mat, simulate.p.value = T)$p.value
pval <- ifelse(pval<0.001, "<0.001", round(pval,3))
c(pval, rep("",length(x)))
}) %>% unlist()
comp1
# bind ESP and PIAAC together
demo <- rbind(data.frame(Study = "ESP", Education = ESP$educ, Income = ESP$income.cat),
data.frame(Study = "PIAAC", Education = PIAAC$educ, Income = PIAAC$income.cat)) %>% as.data.frame()
demo <- demo %>%
mutate(Education = factor(Education), Income = factor(Income))
# gather cat.smry results for ESP and PIAAC
## -4 here means drop the "Refused" level in ESP$educ and the "Unknown" level in PIAAC$educ since each of them is the unique level for its study
## if we keep these two levels, we will find that there is no p-value output of compareGroup function
ESP.smry1 <- c(cat.smry(table(ESP$educ))[-4],cat.smry(table(ESP$income.cat)))
PIAAC.smry <- c(cat.smry(table(PIAAC$educ))[-4],cat.smry(table(PIAAC$income.cat)))
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
# add subtitles of demographics
comp2 <- rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
rownames(comp2) <- NULL
# perform Fisher's test and append p-values to the data frame
p.educ <- fisher.test(table(demo$Study, demo$Education), simulate.p.value = T)$p.value
p.educ <- ifelse(p.educ<0.001, "0.001", round(p.educ,3))
p.income <- fisher.test(table(demo$Study, demo$Income), simulate.p.value = T)$p.value
p.income <- ifelse(p.income<0.001, "<0.001", round(p.income, 3))
comp2$pval <- c(p.educ, rep("",3), p.income, rep("",6))
kable(comp2, row.names = F) %>%
kable_styling(full_width = F) %>%
row_spec(c(1,5), bold = T)
comp2
PIAAC
PIAAC
# bind ESP and PIAAC together
demo <- rbind(data.frame(Study = "ESP", Education = ESP$educ, Income = ESP$income.cat),
data.frame(Study = "PIAAC", Education = PIAAC$educ, Income = PIAAC$income.cat)) %>% as.data.frame()
demo
demo <- demo %>%
mutate(Education = factor(Education), Income = factor(Income))
demo
ESP
table(ESP$educ)
table(ESP$income.cat)
# gather cat.smry results for ESP and PIAAC
## -4 here means drop the "Refused" level in ESP$educ and the "Unknown" level in PIAAC$educ since each of them is the unique level for its study
## if we keep these two levels, we will find that there is no p-value output of compareGroup function
ESP.smry1 <- c(cat.smry(table(ESP$educ))[-4],cat.smry(table(ESP$income.cat)))
ESP.smry1
cat.smry(table(ESP$educ))[-4]
cat.smry(table(ESP$educ))
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
comp2
rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
# add subtitles of demographics
comp2 <- rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
rownames(comp2) <- NULL
comp2
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
rownames(comp2) <- NULL
comp2
# add subtitles of demographics
comp2 <- rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
comp2
rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,])
# perform Fisher's test and append p-values to the data frame
p.educ <- fisher.test(table(demo$Study, demo$Education), simulate.p.value = T)$p.value
p.educ <- ifelse(p.educ<0.001, "0.001", round(p.educ,3))
p.income <- fisher.test(table(demo$Study, demo$Income), simulate.p.value = T)$p.value
p.income <- ifelse(p.income<0.001, "<0.001", round(p.income, 3))
comp2
comp2$pval <- c(p.educ, rep("",3), p.income, rep("",6))
comp2
# bind ESP and PIAAC together
demo <- rbind(data.frame(Study = "ESP", Education = ESP$educ, Income = ESP$income.cat),
data.frame(Study = "PIAAC", Education = PIAAC$educ, Income = PIAAC$income.cat)) %>% as.data.frame()
demo <- demo %>%
mutate(Education = factor(Education), Income = factor(Income))
# gather cat.smry results for ESP and PIAAC
## -4 here means drop the "Refused" level in ESP$educ and the "Unknown" level in PIAAC$educ since each of them is the unique level for its study
## if we keep these two levels, we will find that there is no p-value output of compareGroup function
ESP.smry1 <- c(cat.smry(table(ESP$educ))[-4],cat.smry(table(ESP$income.cat)))
PIAAC.smry <- c(cat.smry(table(PIAAC$educ))[-4],cat.smry(table(PIAAC$income.cat)))
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
# add subtitles of demographics
comp2 <- rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
rownames(comp2) <- NULL
# perform Fisher's test and append p-values to the data frame
p.educ <- fisher.test(table(demo$Study, demo$Education), simulate.p.value = T)$p.value
p.educ <- ifelse(p.educ<0.001, "0.001", round(p.educ,3))
p.income <- fisher.test(table(demo$Study, demo$Income), simulate.p.value = T)$p.value
p.income <- ifelse(p.income<0.001, "<0.001", round(p.income, 3))
comp2$pval <- c(p.educ, rep("",3), p.income, rep("",6))
kable(comp2, row.names = F) %>%
kable_styling(full_width = F) %>%
row_spec(c(1,5), bold = T)
# bind ESP and PIAAC together
demo <- rbind(data.frame(Study = "ESP", Education = ESP$educ, Income = ESP$income.cat),
data.frame(Study = "PIAAC", Education = PIAAC$educ, Income = PIAAC$income.cat)) %>% as.data.frame()
demo <- demo %>%
mutate(Education = factor(Education), Income = factor(Income))
# gather cat.smry results for ESP and PIAAC
## -4 here means drop the "Refused" level in ESP$educ and the "Unknown" level in PIAAC$educ since each of them is the unique level for its study
## if we keep these two levels, we will find that there is no p-value output of compareGroup function
ESP.smry1 <- c(cat.smry(table(ESP$educ))[-4],cat.smry(table(ESP$income.cat)))
PIAAC.smry <- c(cat.smry(table(PIAAC$educ))[-4],cat.smry(table(PIAAC$income.cat)))
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
comp2
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
# add subtitles of demographics
rbind(c("Education", "", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
comp2[1:3,]
# add subtitles of demographics
rbind(c("Education", "n", "m"), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
c("Education", "", "")
data.frame(c("Education", "", ""))
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
rownames(comp2) <- NULL
comp2
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,])
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1,])
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,], "1")
?rbind
dd <- 10
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
# add subtitles of demographics
rbind(Education = "", comp2[1:3,], "1")
rbind(edu = "", c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(edu = 1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(edu = "",a = 1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
# add subtitles of demographics
rbind(Education = "", comp2[1:3,], deparse.level = 2)
comp2[1:3,]
rbind(edu = "",comp2[1:3,], a = 1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(edu = "",a = 1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
# add subtitles of demographics
rbind(Education = "", a = comp2[1:3,], deparse.level = 2)
# add subtitles of demographics
rbind(Education = "", a = comp2[1:3,], deparse.level = 0)
# add subtitles of demographics
rbind(Education = "", comp2[1:3,], deparse.level = 0)
# add subtitles of demographics
rbind(Education = c("Income", "", ""), comp2[1:3,], deparse.level = 0)
# add subtitles of demographics
rbind(Education = c("Income", "", ""), comp2[1:3,], deparse.level = 2)
# add subtitles of demographics
rbind(Education = c("Income", "", ""), a = comp2[1:3,], deparse.level = 2)
# add subtitles of demographics
rbind(Education = 1:4, a = comp2[1:3,], deparse.level = 2)
# add subtitles of demographics
rbind(Education = 1:3, a = comp2[1:3,], deparse.level = 2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 3, digits = 3)
# read data
library(haven)
library(readxl)
# data manipulation
library(tidyverse)
# knit tables
library(knitr)
library(kableExtra)
# compare groups
library(compareGroups)
load("../Data/ESP.RData")
load("../Data/NYS.RData")
load("../Data/PIAAC.RData")
# calculate the number of refuse or -1 (in JAqs) in each column
refuse <- sapply(ESP, function(x) sum(x%in%c("Refused",-1)))
# keep the columns that have refuse
refuse <- refuse[which(refuse>0)]
# append the refuse rate and create a data frame; -2 means remove `age` since it overlaps with age.cat
refuse.df <- rbind(refuse, refuse/8) %>% as.data.frame()
refuse.df <- refuse.df[,-2]
# set col- and rownames
colnames(refuse.df) <- c("Gender", "Age Level", "Education", "Race", "Ethnicity", "JAq1: Fractions", "JAq2: Percentages", "JAq3: Numerical Info")
rownames(refuse.df) <- c("Number", "%")
kable(refuse.df) %>% kable_styling()
par(mfrow = c(1,2))
plot(x=ESP$numeracy, y=ESP$JAq4, pch=19, xlab = "Numeracy Score", ylab = "Health Status Score", main = "Scatter plot of numeracy score and health status")
boxplot(numeracy~JAq4, data = ESP, xlab = "Health Status Score", ylab = "Numeracy Score", main = "Box plot of numeracy score and health status")
# perform one-way ANOVA test
summary(aov(numeracy~health_status, data = ESP))
ESP %>%
filter(educ != "Refused") %>%
group_by(educ) %>%
ggplot() +
geom_boxplot(aes(x=educ, y=numeracy)) +
labs(x = NULL, title = "Box plot of numeracy score and education") +
theme_bw()
# performe one-way ANOVA test
summary(aov(numeracy~educ, data = ESP))
cat.smry <- function(mat, labels = NULL) {
perc <- paste0(round(prop.table(mat)*100,2),"%")
n.perc <- paste0(mat,"(",perc,")")
if(is.null(labels))
names(n.perc) <- names(mat)
else
names(n.perc) <- labels
return(n.perc)
}
# gather all the cat.smry result for ESP sample
ESP.smry <- c(cat.smry(table(ESP$gender)),
cat.smry(table(ESP$age.cat)),
cat.smry(table(ESP$educ)),
cat.smry(table(ESP$income.cat)),
cat.smry(table(ESP$race)),
cat.smry(table(ESP$hisp)))
# join NYS.smry and ESP.smry together (drop levels such as "No data" and "Refused" which are unique for ESP sample by left join NYS)
comp1 <- data.frame(Demographics = rownames(NYS), NYS = NYS$n_perc) %>%
left_join(data.frame(d = names(ESP.smry), ESP = ESP.smry), by = c("Demographics" = "d"))
# extract counts from ESP.smry
ESP.smry <- comp1$ESP
ESP.n <- c()
for(i in 1:length(ESP.smry)) {
n.perc <- ESP.smry[i]
n <- substr(n.perc, 1, unlist(gregexpr("\\(",n.perc))-1)
ESP.n <- c(ESP.n, n)
}
ESP.n <- as.numeric(ESP.n)
# bind the counts of ESP and NYS preparing for fisher's test
fisher.mat <- rbind(ESP.n, unlist(NYS$counts)) %>% as.matrix()
# add subtitles of demographics
comp1 <- rbind(c("Gender", "", ""), comp1[1:2,],
c("Age", "", ""), comp1[3:6,],
c("Education", "", ""), comp1[7:9,],
c("Income", "", ""), comp1[10:14,],
c("Race", "", ""), comp1[15:19,],
c("Ethnicity", "", ""), comp1[20:21,]) %>% as.data.frame()
# append p-values of fisher's test
comp1$pval <- sapply(list(1:2,3:6,7:9,10:14,15:19,20:21),
function(x){
mat <- fisher.mat[,x]
pval <- fisher.test(mat, simulate.p.value = T)$p.value
pval <- ifelse(pval<0.001, "<0.001", round(pval,3))
c(pval, rep("",length(x)))
}) %>% unlist()
kable(comp1, row.names = F) %>%
kable_styling(full_width = F) %>%
row_spec(c(1,4,9,13,19,25), bold = T)
# bind ESP and PIAAC together
demo <- rbind(data.frame(Study = "ESP", Education = ESP$educ, Income = ESP$income.cat),
data.frame(Study = "PIAAC", Education = PIAAC$educ, Income = PIAAC$income.cat)) %>% as.data.frame()
demo <- demo %>%
mutate(Education = factor(Education), Income = factor(Income))
# gather cat.smry results for ESP and PIAAC
## -4 here means drop the "Refused" level in ESP$educ and the "Unknown" level in PIAAC$educ since each of them is the unique level for its study
## if we keep these two levels, we will find that there is no p-value output of compareGroup function
ESP.smry1 <- c(cat.smry(table(ESP$educ))[-4],cat.smry(table(ESP$income.cat)))
PIAAC.smry <- c(cat.smry(table(PIAAC$educ))[-4],cat.smry(table(PIAAC$income.cat)))
comp2 <- data.frame(Demographics=names(ESP.smry1), ESP=ESP.smry1, PIAAC=PIAAC.smry)
# add subtitles of demographics
rbind(Education = 1:3, a = comp2[1:3,], deparse.level = 2)
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,], c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
rbind(c("Education", "", ""), comp2[1:3,], c("Income", "", ""), comp2[4:9,])
comp1
# add subtitles of demographics
rbind(c("Education", "", ""), comp2[1:3,],
c("Income", "", ""), comp2[4:9,]) %>% as.data.frame()
r version
version
update
update()
load(installr)
library(installr)
install.packages("installr")
install.packages("installr")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
install_github('andreacirilloac/updateR')
library(updateR)
