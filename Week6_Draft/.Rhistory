rocplot(ESP.reg$health_status3, predict.glm(final1, ESP.reg, type = "response"), title = "ROC plot")
health_status3 %>%
table()
ESP.reg$health_status_poor %>%
table()
ESP.reg$health_status_good %>%
table()
ESP.reg$health_status_poor %>%
table()
ESP.reg$health_status_good %>%
table()
ESP.reg$health_status3  %>%
table()
full1 <- glm(health_status_good ~ numeracy + gender + age.cat +
educ + income.cat + race + hisp+
educ:numeracy, data = ESP.reg, family = "binomial")
final1 <- step(full1, direction = "both", trace = 0)
multi_summary1 <- exp(cbind(coef(final1), confint(final1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(final1)$coefficients[-1, 4] < 0.05, "*", "")
multi_summary1
# power calculation
powerSim(final1, nsim = 100,  progress = FALSE)
ESP.reg$health_status_good %>%
table()
ESP.reg$health_status
summary(ESP.reg$health_status)
do.call(rbind.data.frame,
lapply(varlist1, univ,
y = "health_status_poor",
dat = ESP.reg))
ESP.reg$health_status_poor %>%
table()
ESP.reg$health_status_good %>%
table()
ESP.reg$health_status3  %>%
table()
summary(ESP.reg$health_status)
(1400 * 5 + 700)/6
(1425 * 5 + 700)/6
full1 <- glm(health_status_good ~ numeracy + gender + age.cat +
educ + income.cat + race + hisp+
educ:numeracy, data = ESP.reg, family = "binomial")
full1 <- glm(health_status_good ~ numeracy + gender + age.cat +
educ + income.cat + race + hisp+
educ:numeracy, data = ESP.reg, family = "binomial")
final1 <- step(full1, direction = "both", trace = 0)
multi_summary1 <- exp(cbind(coef(final1), confint(final1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(final1)$coefficients[-1, 4] < 0.05, "*", "")
multi_summary1
# power calculation
powerSim(final1, nsim = 100,  progress = FALSE)
multi_summary1
# power calculation
powerSim(final1, nsim = 100,  progress = FALSE)
# power calculation
power1 <- powerSim(final1, nsim = 100,  progress = FALSE)
power1$x
power1
power1$n
power1$x/power1$n
fit1 <- glm(health_status_good ~ numeracy + age.cat + educ +
income.cat, data = ESP.reg, family = "binomial")
fit1
final1 <- glm(health_status_good ~ numeracy + age.cat + educ +
income.cat, data = ESP.reg, family = "binomial")
multi_summary1 <- exp(cbind(coef(final1), confint(final1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(final1)$coefficients[-1, 4] < 0.05, "*", "")
multi_summary1
# power calculation
power1 <- powerSim(final1, nsim = 100,  progress = FALSE)
power1
final1
multi_summary1 <- exp(cbind(coef(fit1), confint(fit1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(fit1)$coefficients[-1, 4] < 0.05, "*", "")
# ROC curve
rocplot <- function(truth, pred, ...){
predob = prediction(pred, truth)
perf = performance(predob, "tpr", "fpr")
plot(perf, colorize=F, ...)
area = auc(truth, pred)
area = format(round(area, 4), nsmall = 4)
text(x = .8, y = .1, labels = paste("AUC = ", area))
segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1, col = "gray", lty = 2)
}
rocplot(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"), title = "ROC plot")
title(main = "ROC plot")
rocplot(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"), title = "ROC plot")
auc(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"))
auc1 <- auc(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"))
auc1$auc
auc1[1]
ESP.reg$health_status_good
ESP.reg$health_status_good <- relevel(ESP$health_status_good, ref = "Good")
ESP.reg$health_status_good <- relevel(ESP.reg$health_status_good,
ref = "Good")
ESP.reg$health_status_good <- relevel(ESP.reg$health_status_good,
ref = "Good")
full1 <- glm(health_status_good ~ numeracy + gender + age.cat +
educ + income.cat + race + hisp+
educ:numeracy, data = ESP.reg, family = "binomial")
final1 <- step(full1, direction = "both", trace = 0)
fit1 <- glm(health_status_good ~ numeracy + age.cat + educ +
income.cat, data = ESP.reg, family = "binomial")
multi_summary1 <- exp(cbind(coef(fit1), confint(fit1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(fit1)$coefficients[-1, 4] < 0.05, "*", "")
kable(multi_summary1) %>%
kable_styling()
# power calculation
power1 <- powerSim(fit1, nsim = 100,  progress = FALSE)
auc1 <- auc(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"))
# ROC curve
rocplot <- function(truth, pred, ...){
predob = prediction(pred, truth)
perf = performance(predob, "tpr", "fpr")
plot(perf, colorize=F, ...)
area = auc(truth, pred)
area = format(round(area, 4), nsmall = 4)
text(x = .8, y = .1, labels = paste("AUC = ", area))
segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1, col = "gray", lty = 2)
}
rocplot(ESP.reg$health_status_good, predict.glm(fit1, ESP.reg, type = "response"), title = "ROC plot")
title(main = "ROC plot")
summary(final1)
full1 <- glm(health_status_poor ~ numeracy + educ + hisp + race +
income.cat + educ:numeracy, data = ESP,
family = "binomial")
full1 <- glm(health_status_poor ~ numeracy + educ + hisp + race +
income.cat + educ:numeracy, data = ESP.reg,
family = "binomial")
final1 <- step(full1, direction = "both", trace = 0)
multi_summary1 <- exp(cbind(coef(final1), confint(final1))[-1, ]) %>% as.data.frame()
colnames(multi_summary1)[1] <- "OR"
multi_summary1$sig <- ifelse(summary(final1)$coefficients[-1, 4] < 0.05, "*", "")
# power calculation
powerSim(final1, nsim = 100,  progress = FALSE)
multi_summary1
ESP.reg
ESP.weighted <- ESP.reg %>%
mutate(wt = 1)
# This function generate survey weights automatically
surv.wt <- function(x, w, col_pos, col_name){
# x: dataset of interest
# w: NYS percentages
# cpl_pos: column number of the variable to be weighted
# col_name: name of the variable to be weighted
#x <- ESP.weighted; w <- wt.edu; col_pos<- 5; col_name <- "educ"
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(wt = sum(wt)/nrow(x)) %>%
mutate(wt_new = w/wt) %>%
select(-wt)
merge(x, x1, by = col_name) %>%
mutate(wt = wt * wt_new) %>%
select(-wt_new)
}
ESP.weighted
which(colnames(ESP.weighted) == "educ")
# This function generate survey weights automatically
surv.wt <- function(x, w, col_name){
# x: dataset of interest
# w: NYS percentages
# cpl_pos: column number of the variable to be weighted
# col_name: name of the variable to be weighted
#x <- ESP.weighted; w <- wt.edu; col_pos<- 5; col_name <- "educ"
col_pos <- which(colnames(ESP.weighted) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(wt = sum(wt)/nrow(x)) %>%
mutate(wt_new = w/wt) %>%
select(-wt)
merge(x, x1, by = col_name) %>%
mutate(wt = wt * wt_new) %>%
select(-wt_new)
}
surv.wt(ESP.weighted, wt.edu, "educ")
wt.educ <- c(0.3892, 0.2777, 0.3332)
wt.income <- c(0.33, .418, .1233, .1283)
wt.race <- c(.697, .176, 0.127)
surv.wt(ESP.weighted, wt.edu, "educ")
ESP.weighted <- ESP.reg %>%
mutate(wt = 1)
surv.wt(ESP.weighted, wt.edu, "educ")
# This function generate survey weights automatically
surv.wt <- function(x, w, col_name){
# x: dataset of interest
# w: NYS percentages
# cpl_pos: column number of the variable to be weighted
# col_name: name of the variable to be weighted
#x <- ESP.weighted; w <- wt.edu; col_pos<- 5; col_name <- "educ"
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(wt = sum(wt)/nrow(x)) %>%
mutate(wt_new = w/wt) %>%
select(-wt)
merge(x, x1, by = col_name) %>%
mutate(wt = wt * wt_new) %>%
select(-wt_new)
}
surv.wt(ESP.weighted, wt.edu, "educ")
x <- ESP.weighted
w <- wt.edu
col_name <-  "educ"
w <- wt.edu
surv.wt(ESP.weighted, wt.educ, "educ")
# 1st iterative
ESP.weighted <- surv.wt(ESP.weighted, wt.educ, "educ")
ESP.weighted <- surv.wt(ESP.weighted, wt.income, "income.cat")
ESP.weighted <- surv.wt(ESP.weighted, wt.race, "race")
ESP.weighted$wt
sum(ESP.weighted$wt)
ESP.weighted %>%
group_by(wt.educ) %>%
summarise(w = sum(wt))
ESP.weighted %>%
group_by(educ) %>%
summarise(w = sum(wt))
ESP.reg%>%
group_by(educ) %>%
summarise(w = sum(wt))
ESP.reg %>%
group_by(educ) %>%
summarise(w = n())
ESP.reg %>%
group_by(educ) %>%
summarise(w = n())
ESP.weighted %>%
group_by(educ) %>%
summarise(w = sum(wt))
ESP.weighted %>%
group_by(income.cat) %>%
summarise(w = sum(wt))
ESP.weighted %>%
group_by(race) %>%
summarise(w = sum(wt))
a <- ESP.weighted %>%
group_by(race) %>%
summarise(w = sum(wt))
a
fisher.test(a$w, wt.educ)
a <- fisher.test(a$w, wt.educ)
a$p.value
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig <- function(x, col_name, w2){
c1 <- which(colnames(x) == col_name)
a <- ESP.weighted %>%
group_by(c1) %>%
summarise(w = sum(wt))
fisher.test(a$w, w2)$p.value < 0.05
}
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by(col_pos) %>%
summarise(w = sum(wt))
fisher.test(a$w, w2)$p.value < 0.05
}
fisher.sig(ESP.weighted, "educ", wt.educ)
col_pos <- which(colnames(x) == col_name)
col_pos
x1 <- x %>%
group_by(col_pos) %>%
summarise(w = sum(wt))
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(a$w, w2)$p.value < 0.05
}
fisher.sig(ESP.weighted, "educ", wt.educ)
x <- ESP.weighted
col_name
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
a$w
x1$w
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(x1$w, w2)$p.value < 0.05
}
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig(ESP.weighted, "income.cat", wt.income)
fisher.sig(ESP.weighted, "race", wt.race)
ESP.weighted <- ESP.reg %>%
mutate(wt = 1)
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig(ESP.weighted, "income.cat", wt.income)
fisher.sig(ESP.weighted, "race", wt.race)
ESP.weighted
# Check for difference
ESP.weighted %>%
group_by(educ) %>%
summarise(n = n())
fisher.test(c(173, 216, 374), c(97506, 69577, 83478))
fisher.test(c(173, 216, 374), c(97506, 69577, 83478), simulate.p.value = T)
fisher.test(c(403, 393), c(121301, 129262), simulate.p.value = T)
fisher.test(c(42, 298, 286, 168), c(11851, 103469, 82455, 52788), simulate.p.value = T)
fisher.test(c(42, 298, 286, 168), c(11851, 103469, 82455, 52788)/sum(c(11851, 103469, 82455, 52788)), simulate.p.value = T)
c(11851, 103469, 82455, 52788)/sum(c(11851, 103469, 82455, 52788)
c(11851, 103469, 82455, 52788)/sum(c(11851, 103469, 82455, 52788)
c(11851, 103469, 82455, 52788)/sum(c(11851, 103469, 82455, 52788))
install.packages("ggpubr")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align = "center")
options(scipen = 3, digits = 3)
# load ESP data
raw_ESP <- read_xlsx("./Data/ESP19 JA - Alldata.xlsx")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align = "center")
options(scipen = 3, digits = 3)
# read data
library(haven)
library(readxl)
# data manipulation
library(tidyverse)
# knit table
library(knitr)
library(kableExtra)
# data visualization
library(ggplot2)
library(ggpubr)
# load ESP data
raw_ESP <- read_xlsx("./Data/ESP19 JA - Alldata.xlsx")
# load ESP data
raw_ESP <- read_xlsx(".//Data/ESP19 JA - Alldata.xlsx")
# gather all the cat.smry result for ESP sample
ESP.smry <- c(cat.smry(table(ESP.reg$gender)),
cat.smry(table(ESP.reg$age.cat)),
cat.smry(table(ESP.reg$educ)),
cat.smry(table(ESP.reg$income.cat)),
cat.smry(table(ESP.reg$race)),
cat.smry(table(ESP.reg$hisp)))
cat.smry <- function(mat, labels = NULL) {
perc <- paste0(round(prop.table(mat)*100,2),"%")
n.perc <- paste0(mat,"(",perc,")")
if(is.null(labels))
names(n.perc) <- names(mat)
else
names(n.perc) <- labels
return(n.perc)
}
# gather all the cat.smry result for ESP sample
ESP.smry <- c(cat.smry(table(ESP.reg$gender)),
cat.smry(table(ESP.reg$age.cat)),
cat.smry(table(ESP.reg$educ)),
cat.smry(table(ESP.reg$income.cat)),
cat.smry(table(ESP.reg$race)),
cat.smry(table(ESP.reg$hisp)))
ESP.smry
# extract counts from ESP.smry
ESP.smry <- comp1$ESP
# join NYS.smry and ESP.smry together (drop levels such as "No data" and "Refused" which are unique for ESP sample by left join NYS)
comp1 <- data.frame(Demographics = rownames(NYS), NYS = NYS$n_perc) %>%
left_join(data.frame(d = names(ESP.smry)[-3], ESP = ESP.smry[-3]), by = c("Demographics" = "d"))
load("./Data/NYS.RData")
load("../Data/NYS.RData")
# join NYS.smry and ESP.smry together (drop levels such as "No data" and "Refused" which are unique for ESP sample by left join NYS)
comp1 <- data.frame(Demographics = rownames(NYS), NYS = NYS$n_perc) %>%
left_join(data.frame(d = names(ESP.smry)[-3], ESP = ESP.smry[-3]), by = c("Demographics" = "d"))
# extract counts from ESP.smry
ESP.smry <- comp1$ESP
ESP.n <- c()
ESP.n
for(i in 1:length(ESP.smry)) {
n.perc <- ESP.smry[i]
n <- substr(n.perc, 1, unlist(gregexpr("\\(",n.perc))-1)
ESP.n <- c(ESP.n, n)
}
ESP.n <- as.numeric(ESP.n)
# bind the counts of ESP and NYS preparing for fisher's test
fisher.mat <- rbind(ESP.n, unlist(NYS$counts)) %>% as.matrix()
fisher.mat
# add subtitles of demographics
comp1 <- rbind(c("Gender", "", ""), comp1[1:2,],
c("Age", "", ""), comp1[3:6,],
c("Education", "", ""), comp1[7:9,],
c("Income", "", ""), comp1[10:13,],
c("Race", "", ""), comp1[14:16,],
c("Ethnicity", "", ""), comp1[17:18,]) %>% as.data.frame()
fisher.mat
fisher.mat[,1:2]
fisher.test(mat, simulate.p.value = T)$p.value
fisher.mat[,1:2] -> mat
fisher.test(mat, simulate.p.value = T)$p.value
fisher.test(mat)
fisher.test(mat, simulate.p.value = T)
fisher.test(mat, simulate.p.value = T)$p.value
fisher.test(mat, simulate.p.value = T)
mat
fisher.test(c(389, 374), c(121301, 129262), simulate.p.value = T)
fisher.test(c(389, 374), c(121301, 129262), simulate.p.value = T)$p.value
?fisher.test
fisher.test(matrix(c(389, 374, 121301, 129262), nrow = 2), simulate.p.value = T)$p.value
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(matrix(c(x1$w, w2), nrow = length(w2)))$p.value < 0.05
}
fisher.test(c(403, 393), c(121301, 129262), simulate.p.value = T)
fisher.sig(ESP.weighted, "educ", wt.educ)
ESP.weighted <- ESP.reg %>%
mutate(wt = 1)
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig(ESP.weighted, "income.cat", wt.income)
fisher.sig(ESP.weighted, "race", wt.race)
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(matrix(c(x1$w, w2), byrow = T,
ncol = length(w2)))$p.value < 0.05
}
fisher.sig(ESP.weighted, "educ", wt.educ)
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(matrix(c(x1$w, w2), byrow = T,
ncol = length(w2)))$p.value
}
fisher.sig(ESP.weighted, "educ", wt.educ)
x <- ESP.weighted
col_name <- "educ"
w2 <- wt.educ
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
matrix(c(x1$w, w2), byrow = T,
ncol = length(w2))
mat1 <- matrix(c(x1$w, w2), byrow = T,
ncol = length(w2))
mat1 <- matrix(c(x1$w, w2), byrow = T,
ncol = length(w2))
fisher.test(mat1)
mat <- fisher.mat[,7:9]
mat
mat1
fisher.test(mat)
fisher.test(mat, simulate.p.value = T)
fisher.test(mat1, simulate.p.value = T)
mat1
fisher.test(mat1, simulate.p.value = T)
mat1[2, ]
mat1[2, ] <- mat1[2, ]*100
fisher.test(mat1, simulate.p.value = T)
mat1
fisher.test(mat1, simulate.p.value = T)
fisher.test(mat, simulate.p.value = T)
mat
97506/(97506 + 69577 + 83478)
69577/(97506 + 69577 + 83478)
83478/(97506 + 69577 + 83478)
33.03 + 41.8 + 12.33 + 12.83
(97506 + 69577 + 83478)
51303 + 64932 + 19158 + 19930
?fisher.test
fisher.test(matrix(c(1.3, 1.4, 2.3, 2.4), nrow = 2))
fisher.sig <- function(x, col_name, w2){
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
fisher.test(matrix(c(x1$w, w2), byrow = T,
ncol = length(w2)))$p.value
}
ESP.weighted <- ESP.reg %>%
mutate(wt = 1)
fisher.sig(ESP.weighted, "educ", wt.educ)
x <- ESP.weighted
w2 <- wt.educ
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
matrix(c(x1$w, w2), byrow = T,
ncol = length(w2))
wt.educ <- c(97506, 69577, 83478)
wt.income <- c(51303, 64932, 19158, 19930)
wt.race <- c(13559, 3424, 2471)
fisher.sig(ESP.weighted, "educ", wt.educ)
x <- ESP.weighted
col_name <- "educ"
w2 <- wt.educ
col_pos <- which(colnames(x) == col_name)
x1 <- x %>%
group_by_at(col_pos) %>%
summarise(w = sum(wt))
matrix(c(x1$w, w2), byrow = T,
ncol = length(w2))
mat
fisher.test(matrix(c(x1$w, w2), byrow = T,
ncol = length(w2)))$p.value
fisher.test(mat)
fisher.test(mat1)
mat1
mat
fisher.test(mat)
